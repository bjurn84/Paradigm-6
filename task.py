# Контекст
# Предположим, что мы хотим найти элемент в массиве (получить
# его индекс). Мы можем это сделать просто перебрав все элементы.
# Но что, если массив уже отсортирован? В этом случае можно
# использовать бинарный поиск. Принцип прост: сначала берём
# элемент находящийся посередине и сравниваем с тем, который мы
# хотим найти. Если центральный элемент больше нашего,
# рассматриваем массив слева от центрального, а если больше -
# справа и повторяем так до тех пор, пока не найдем наш элемент.
# ● Ваша задача
# Написать программу на любом языке в любой парадигме для
# бинарного поиска. На вход подаётся целочисленный массив и
# число. На выходе - индекс элемента или -1, в случае если искомого
# элемента нет в массиве.

# Бинарный поиск был выбран из-за своей эффективности. Он имеет временную сложность O(log n), что означает, что время выполнения поиска растёт медленно даже для больших массивов. 
# В сравнении с линейным поиском, бинарный поиск обычно требует гораздо меньше операций для поиска элемента в отсортированном массиве. 
# Таким образом, бинарный поиск является оптимальным выбором при работе с отсортированными массивами. 

def binary_search(arr, target):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2

        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    return -1

array = [1, 3, 6, 8, 12, 15, 17, 21, 25, 29]
target = 17

result = binary_search(array, target)
if result != -1:
    print("Элемент найден по индексу:", result)
else:
    print("Искомый элемент не найден.")